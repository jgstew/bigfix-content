<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Enable SSH PasswordAuthentication if AD joined - Linux Unix</Title>
		<Description>Enable SSH PasswordAuthentication to allow Active Directory Logins with password </Description>
		<Relevance>exists files "/etc/ssh/sshd_config"</Relevance>
		<Relevance>not exists lines containing "yes" whose(it starts with "PasswordAuthentication") of files "/etc/ssh/sshd_config"</Relevance>
		<Relevance>/* system joined to at least 1 domain */ exists following texts of firsts "[sssd].domains=" of variables whose(it starts with "[sssd].domains=") of files "/etc/sssd/sssd.conf"</Relevance>
		<Category></Category>
		<DownloadSize>0</DownloadSize>
		<Source>Internal</Source>
		<SourceID>jgstew</SourceID>
		<SourceReleaseDate>2020-08-30</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Wed, 09 Sep 2020 18:51:19 +0000</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell">
// NOTE: not currently handling the case in which no entry for PasswordAuthentication exists in the file
continue if { exists lines containing "PasswordAuthentication" whose(it starts with "PasswordAuthentication") of files "/etc/ssh/sshd_config" }

// change config:
wait bash -c "sed -i {if mac of operating system then "''" else ""} '/\(^PasswordAuthentication *\).*/ s//\1yes/' /etc/ssh/sshd_config"

continue if { exists lines containing "yes" whose(it starts with "PasswordAuthentication") of files "/etc/ssh/sshd_config" }

// restart sshd service if no active ssh connections:
if { not exists sockets whose(established of tcp state of it AND "sshd" = name of process of it) of networks }
wait bash -c "systemctl restart sshd.service"
elseif
// tag system for reboot if sshd service was not restarted:
action requires restart "sshd.service sshd_config change"
endif
</ActionScript>
		</DefaultAction>
	</Fixlet>
</BES>
